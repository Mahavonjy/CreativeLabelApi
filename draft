Mon Plan:

Create function for prestige, payment activity history
Transform Tab payment and payment to one table
Susggestion 10 Artist, Top 10 Artist
Suggestion (max 10 genres) Playlist for users, Top 10 song in Playlistw


# def trie_by_artist_proximity(user_id):
cree table flags(pays, ville, region)
table publicit√©
table suggestion
abonnement que pour le streaming n'aie plus de pub
suggestion d'affichage par artist de region if connect
suggestion avec les classement des meilleur jeunes artiste par region, et ville
parametre d'envoye d'email pour les question et le reste(service client)


# @media_api.route('/DownloadSong/<song_id>', methods=['GET'])
# def Download_Song(song_id):

function download exemple
        # exists = os.path.isfile('sources/' + 'Music/' + datastore['storage_name'])
        # basename, extension = datastore['storage_name'].rsplit('.', 1)
        # blob.download_to_filename('sources/' + 'Music/' + datastore['storage_name'])
        # blob.acl.all().revoke_read()
        # blob.acl.save(client=blob.client)
        # blob.download_to_filename('sources/' + 'Music/' + datastore['storage_name'])
        # return Response(generate(datastore['storage_name']), mimetype="audio/" + extension)


artist can "support" other artist but only the artist with many follow
manager can observe many artist and can show all artist with lui
client can attached with many artist

                    {/*<h2>Tout les instrumental</h2>*/}



def generate(song_name):
    """ generate song for stream """

    path = os.getcwd()
    with open(path + '/' + "sources/Music/" + song_name, "rb") as audio:
        data = audio.read(1024)
        while data:
            yield data
            data = audio.read(1024)



  webservice:
    image: nginx:1.13.7-alpine
    container_name: webservice
    depends_on:
      - api
    volumes:
      - ./nginx_creative.conf:/etc/nginx/conf.d/default.conf
    networks:
      - creative-network
    restart: always
    ports:
      - 80:80



`HTTPS=true npm start`
`npm install -g npm` # for up to date
`npm run-script build`
`gunicorn -w 1 -k gevent run:app`


```@media_api.route('/genre/music/<string:genre>', methods=['GET'])
def get_all_song_by_music_genre(genre, other=None):
    """ Get all song not beats genre """

    if genre in allowed_genres:
        return all_medias_in_genre(genre, other, "music")
    return custom_response("Not genre existing in database", 400)


@media_api.route('/genre/beats/<string:genre>', methods=['GET'])
def get_all_song_by_beats_genre(genre, other=None):
    """ Get all song beats genre"""

    if genre in allowed_genres:
        return all_medias_in_genre(genre, other, "beats")
    return custom_response("Not genre existing in database", 400)```

    ``def all_medias_in_genre(genre, other, genre_musical):
    """ get all song genre """

    all_songs, genre, count = Media.get_song_by_genre(genre), {}, 0
    for songs in all_songs:
        data = media_schema.dump(songs).data
        if data.get("genre_musical") == genre_musical:
            genre[count], count = data, count + 1
    return genre if other else custom_response(genre, 200)``

request
    request_ = user.requests
    if user_r == 'artist' and request_ and not ser_user['artist']:
        r_s = requests_schema.dump(request_[0]).data
        if r_s['accepted']:
            create_artist_story(ser_user['id'])
            u_profile = user.profile
            user_profile = profile_schema.dump(u_profile).data
            user_profile['artist_name'] = r_s['artist_name']
            u_profile.update(user_profile)
            ser_user['client'], ser_user['artist'], ser_user['manager'] = 0, 1, 0
        elif r_s['declined']:
            return custom_response("your request is declined", 400)
        elif not r_s['accepted']:
            return custom_response("wait a few day", 400)
    else:
        return custom_response("you are not request or you are artist now", 400)

# import sentry_sdk
# from sentry_sdk.integrations.flask import FlaskIntegration
# from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration

# sentry_sdk.init(
#     dsn="https://8ca78b489b6e4cc6b1a26ffd5852a8e8@sentry.io/1814450",
#     integrations=[FlaskIntegration(), SqlalchemyIntegration()]
# )

penser a faire la documentation en swagger de l'API

before run app

`export FLASK_ENV=development`
`export DATABASE_URL=postgresql://cynthionmahavonjy:2245@localhost:5432/creative JWT_SECRET_KEY=qwerty`

Migration

1) `python Manage.py db init`
2) `python Manage.py db migrate`
3) `python Manage.py db upgrade`

Edition file

get all country and city on this link `http://download.geonames.org/export/dump/`

generate https certification in local `openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365`
